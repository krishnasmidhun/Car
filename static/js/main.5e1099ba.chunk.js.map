{"version":3,"sources":["image/parallel-parking-1.jpg","Components/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","props","handleLength","event","setState","length","target","value","handleWidth","width","handleWheel_to_bumper","wheel_to_bumper","handleWheel_base","wheel_base","handleTurning_radius","turning_radius","ConvertNumber","num","Number","mathcalc","this","ans","Math","sqrt","round","EPSILON","handleSubmit","result","state","preventDefault","className","src","car1","alt","onSubmit","type","step","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e1099ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parallel-parking-1.7355c6d7.jpg\";","import React, { Component } from 'react'\r\nimport '../ComponentCss/body.css'\r\nimport car1 from  '../image/parallel-parking-1.jpg'\r\nclass Body extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             length:'',\r\n             width:'',\r\n             wheel_to_bumper:'',\r\n             wheel_base:'',\r\n             turning_radius:'',\r\n             result:0\r\n        }\r\n    }\r\n    handleLength=(event)=>{\r\n        this.setState(\r\n            {\r\n             length:event.target.value\r\n            }\r\n        )\r\n    }\r\n    handleWidth=(event)=>{\r\n       this.setState(\r\n           {\r\n            width:event.target.value\r\n           }\r\n       )\r\n   }\r\n\r\n   handleWheel_to_bumper=(event)=>{\r\n    this.setState(\r\n        {\r\n            wheel_to_bumper:event.target.value\r\n        }\r\n    )\r\n}\r\nhandleWheel_base=(event)=>{\r\n    this.setState(\r\n        {\r\n            wheel_base:event.target.value\r\n        }\r\n    )\r\n}\r\nhandleTurning_radius=(event)=>{\r\n    this.setState(\r\n        {\r\n            turning_radius:event.target.value\r\n        }\r\n    )\r\n}\r\nConvertNumber=num=>Number(num)\r\nmathcalc= function (length,width,wheel_to_bumper,wheel_base,turning_radius){\r\n    length=this.ConvertNumber(length)\r\n    width=this.ConvertNumber(width)\r\n    wheel_to_bumper=this.ConvertNumber(wheel_to_bumper)\r\n    wheel_base=this.ConvertNumber(wheel_base)\r\n    turning_radius=this.ConvertNumber(turning_radius)\r\n    let ans=length+\r\n              Math.sqrt(\r\n                    (turning_radius**2 - wheel_base**2)+\r\n                    ((wheel_base+wheel_to_bumper)**2)-\r\n                    ((Math.sqrt((turning_radius**2)-(wheel_base**2))-width)**2)\r\n                 )-wheel_base-wheel_to_bumper\r\n              ;\r\n    return Math.round((ans + Number.EPSILON) * 100) / 100;\r\n}\r\n   handleSubmit= event=>{\r\n      \r\n    this.setState(\r\n        {\r\n            result:this.mathcalc( \r\n                this.state.length,\r\n                this.state.width,\r\n                this.state.wheel_to_bumper,\r\n                this.state.wheel_base,\r\n                this.state.turning_radius\r\n                )\r\n        }\r\n    )\r\n       event.preventDefault()\r\n   }\r\n    render() {\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"grid\">\r\n                    <div className=\"car-diagram\">\r\n                        <figure className=\"car1\">\r\n                            <img src={car1} alt=\"Car 1\"></img>\r\n                        </figure>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <form className=\"form\" onSubmit={this.handleSubmit}>\r\n                                <div className=\"card\">\r\n                                    <h1>Dimensions</h1>\r\n                                    <p>(In Metre)</p>\r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    <h2>Length of the parking car</h2>\r\n                                    <input  type=\"number\"\r\n                                            step=\"0.001\"\r\n                                            placeholder=\"1.000 metre\"\r\n                                            value={this.state.length}\r\n                                            onChange={this.handleLength}\r\n                                    />\r\n                                    \r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    <h2>Width of the parked car</h2>\r\n                                    <input  type=\"number\"\r\n                                            step=\"0.001\"\r\n                                            placeholder=\"1.000 metre\"\r\n                                            value={this.state.width}\r\n                                            onChange={this.handleWidth}\r\n                                    />\r\n                                    \r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    <h2>Front wheel to Bumper</h2>\r\n                                    <input  type=\"number\"\r\n                                            step=\"0.001\"\r\n                                            placeholder=\"1.000 metre\"\r\n                                            value={this.state.wheel_to_bumper}\r\n                                            onChange={this.handleWheel_to_bumper}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    <h2>Wheelbase</h2>\r\n                                    <input  type=\"number\"\r\n                                            step=\"0.001\"\r\n                                            placeholder=\"1.000 metre\"\r\n                                            value={this.state.wheel_base}\r\n                                            onChange={this.handleWheel_base}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    <h2>Turning radius</h2>\r\n                                    <input  type=\"number\"\r\n                                            step=\"0.001\"\r\n                                            placeholder=\"1.000 metre\"\r\n                                            value={this.state.turning_radius}\r\n                                            onChange={this.handleTurning_radius}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    \r\n                                    <button type=\"submit\">Submit</button>\r\n                                </div>\r\n                                <div className=\"card\">\r\n                                    <h1 className=\"Minimum-text\">Minimum Space Required</h1>\r\n                                    <h2>{this.state.result}</h2>\r\n                                </div>\r\n\r\n                        </form>\r\n                    </div>\r\n    \r\n                </div>\r\n               \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Body;\r\n","import React from 'react';\nimport './App.css';\nimport Body from './Components/Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}